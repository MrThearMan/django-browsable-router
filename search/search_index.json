{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Django Browsable Router pip install django-browsable-router Documentation : https://mrthearman.github.io/django-browsable-router/ Source Code : https://github.com/MrThearMan/django-browsable-router/ A Django Restframework router that can show APIViews and include other routers as navigable urls in the root view. from browsable_router import APIRouter from rest_framework.views import APIView from rest_framework.viewsets import ViewSet class TestView(APIView): ... class TestViewSet(ViewSet): ... router_1 = APIRouter(name=\"other_routes\", docstring=\"These are under a different route.\") router_1.register(r\"view-1\", TestView.as_view(), \"view_1\") router_1.register(r\"view-2\", TestViewSet.as_view(), \"view_2\") router_2 = APIRouter() router_2.register(r\"view-3\", TestView.as_view(), \"view_3\") router_2.navigation_routes = { \"route\": router_1, } urlpatterns = [ path(\"api/\", include(router_2.urls)) ] Resulting browsable API: # API Root: # \"\"\"API root.\"\"\" # # \"route\": \"/api/route/\" # \"view-3\": \"/api/view-3/\" # # Other Routes: # \"\"\"These are under a different route.\"\"\" # # \"view-1\": \"/api/route/view-1/\" # \"view-2\": \"/api/route/view-2/\" Additional stuff: ApiMetadata This metadata class is enabled by default on BaseAPIView, and it will allow you to document your views automatically. Basically, it reads the InputSerializers fields as input, and the OutputSerializer fields as the output for each HTTP method for that view. You can then make a OPTIONS request to the view endpoint and get a JSON Schema-ish representation of the input and output for that endpoint. SerializerAsOutputMetadata This metadata class works like APIMetadata class, but is intended for the generic views that come with django rest framework. It assumes that the endpoint takes no arguments and returns the method serializers fields as output. BlockSchemaAccess This is a permission class that can be used to block access to OPTIONS schema in production (DEBUG=False).","title":"Home"},{"location":"#django-browsable-router","text":"pip install django-browsable-router Documentation : https://mrthearman.github.io/django-browsable-router/ Source Code : https://github.com/MrThearMan/django-browsable-router/ A Django Restframework router that can show APIViews and include other routers as navigable urls in the root view. from browsable_router import APIRouter from rest_framework.views import APIView from rest_framework.viewsets import ViewSet class TestView(APIView): ... class TestViewSet(ViewSet): ... router_1 = APIRouter(name=\"other_routes\", docstring=\"These are under a different route.\") router_1.register(r\"view-1\", TestView.as_view(), \"view_1\") router_1.register(r\"view-2\", TestViewSet.as_view(), \"view_2\") router_2 = APIRouter() router_2.register(r\"view-3\", TestView.as_view(), \"view_3\") router_2.navigation_routes = { \"route\": router_1, } urlpatterns = [ path(\"api/\", include(router_2.urls)) ] Resulting browsable API: # API Root: # \"\"\"API root.\"\"\" # # \"route\": \"/api/route/\" # \"view-3\": \"/api/view-3/\" # # Other Routes: # \"\"\"These are under a different route.\"\"\" # # \"view-1\": \"/api/route/view-1/\" # \"view-2\": \"/api/route/view-2/\"","title":"Django Browsable Router"},{"location":"#additional-stuff","text":"","title":"Additional stuff:"},{"location":"#apimetadata","text":"This metadata class is enabled by default on BaseAPIView, and it will allow you to document your views automatically. Basically, it reads the InputSerializers fields as input, and the OutputSerializer fields as the output for each HTTP method for that view. You can then make a OPTIONS request to the view endpoint and get a JSON Schema-ish representation of the input and output for that endpoint.","title":"ApiMetadata"},{"location":"#serializerasoutputmetadata","text":"This metadata class works like APIMetadata class, but is intended for the generic views that come with django rest framework. It assumes that the endpoint takes no arguments and returns the method serializers fields as output.","title":"SerializerAsOutputMetadata"},{"location":"#blockschemaaccess","text":"This is a permission class that can be used to block access to OPTIONS schema in production (DEBUG=False).","title":"BlockSchemaAccess"}]}